<?php

namespace rollun\test\functional\DataStore\TableGateway;

use Psr\Container\ContainerInterface;
use PHPUnit\Framework\TestCase;
use rollun\datastore\TableGateway\TableManagerMysql;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-29 at 18:23:51.
 */
class TableManagerMysqlTest extends TestCase
{
    /**
     * @var ContainerInterface
     */
    protected $container;

    /**
     * @var string
     */
    protected $tableName;

    /**
     * @return ContainerInterface
     */
    protected function getContainer()
    {
        if ($this->container === null) {
            $this->container = include 'config/container.php';
        }

        return $this->container;
    }

    /**
     * @var array
     */
    protected $tableScheme = [
        'testTable1' => [
            'id' => [
                TableManagerMysql::FIELD_TYPE => TableManagerMysql::TYPE_INTEGER,
                TableManagerMysql::FIELD_PARAMS => [
                    TableManagerMysql::PROPERTY_OPTIONS => [
                        TableManagerMysql::OPTION_AUTOINCREMENT => true,
                    ],
                ],
            ],
            'name' => [
                TableManagerMysql::FIELD_TYPE => TableManagerMysql::TYPE_VARCHAR,
                TableManagerMysql::FIELD_PARAMS => [
                    TableManagerMysql::PROPERTY_LENGTH => 10,
                    TableManagerMysql::PROPERTY_NULLABLE => true,
                    TableManagerMysql::PROPERTY_DEFAULT => 'foo',
                ],
                TableManagerMysql::UNIQUE_KEY => true,
            ],
        ],
        'testTable2' => [
            'id' => [
                TableManagerMysql::FIELD_TYPE => TableManagerMysql::TYPE_INTEGER,
                TableManagerMysql::FIELD_PARAMS => [
                    TableManagerMysql::PROPERTY_OPTIONS => [
                        TableManagerMysql::OPTION_AUTOINCREMENT => true,
                    ],
                ],
                TableManagerMysql::FOREIGN_KEY => [
                    TableManagerMysql::OPTION_REFERENCE_TABLE => 'testTable1',
                    TableManagerMysql::OPTION_REFERENCE_COLUMN => 'id',
                    TableManagerMysql::OPTION_ON_DELETE_RULE => 'cascade',
                    TableManagerMysql::OPTION_ON_UPDATE_RULE => null,
                    TableManagerMysql::OPTION_NAME => null,
                ],
            ],
            'name' => [
                TableManagerMysql::FIELD_TYPE => TableManagerMysql::TYPE_VARCHAR,
                TableManagerMysql::FIELD_PARAMS => [
                    TableManagerMysql::PROPERTY_LENGTH => 10,
                    TableManagerMysql::PROPERTY_NULLABLE => true,
                    TableManagerMysql::PROPERTY_DEFAULT => 'foo',
                ],
            ],
        ],
        'testTable3' => [
            'id' => [
                TableManagerMysql::FIELD_TYPE => TableManagerMysql::TYPE_VARCHAR,
                TableManagerMysql::FIELD_PARAMS => [
                    TableManagerMysql::PROPERTY_LENGTH => 10,
                    TableManagerMysql::PROPERTY_NULLABLE => true,
                    TableManagerMysql::PROPERTY_DEFAULT => 'foo',
                ],
            ],
        ],
    ];

    protected function spaces($count)
    {
        return str_repeat(' ', $count);
    }

    protected function getTableInfo($tableName)
    {
        $tableInfo = [
            'testTable1' => "{$this->spaces(4)}With columns:".PHP_EOL."{$this->spaces(8)}id -> int".PHP_EOL
                ."{$this->spaces(8)}name -> varchar".PHP_EOL.PHP_EOL."{$this->spaces(4)}With constraints:".PHP_EOL
                ."{$this->spaces(8)}_laminas_testTable1_PRIMARY -> PRIMARY KEY".PHP_EOL."{$this->spaces(12)}column: id"
                .PHP_EOL."{$this->spaces(8)}_laminas_testTable1_UniqueKey_testTable1_name -> UNIQUE".PHP_EOL
                ."{$this->spaces(12)}column: name".PHP_EOL,
            'testTable2' => "{$this->spaces(4)}With columns:".PHP_EOL."{$this->spaces(8)}id -> int".PHP_EOL
                ."{$this->spaces(8)}name -> varchar".PHP_EOL.PHP_EOL."{$this->spaces(4)}With constraints:".PHP_EOL
                ."{$this->spaces(8)}_laminas_testTable2_PRIMARY -> PRIMARY KEY".PHP_EOL."{$this->spaces(12)}column: id"
                .PHP_EOL."{$this->spaces(8)}ForeignKey_testTable2_id -> FOREIGN KEY".PHP_EOL
                ."{$this->spaces(12)}column: id => testTable1.id".PHP_EOL."{$this->spaces(12)}OnDeleteRule: CASCADE"
                .PHP_EOL."{$this->spaces(12)}OnUpdateRule: NO ACTION".PHP_EOL,
            'testTable3' => "{$this->spaces(4)}With columns:".PHP_EOL."{$this->spaces(8)}id -> varchar".PHP_EOL.PHP_EOL
                ."{$this->spaces(4)}With constraints:".PHP_EOL."{$this->spaces(8)}_laminas_testTable3_PRIMARY -> PRIMARY KEY"
                .PHP_EOL."{$this->spaces(12)}column: id".PHP_EOL,
        ];

        return $tableInfo[$tableName];
    }

    protected function createObject($configs = null)
    {
        $adapter = $this->getContainer()
            ->get('db');

        return new TableManagerMysql($adapter, $configs);
    }

    public function testConstructWithConfigsSuccess()
    {
        $tables = [
            'testTable1',
            'testTable2',
            'testTable3',
        ];

        $object = $this->createObject([
            TableManagerMysql::KEY_AUTOCREATE_TABLES => $this->tableScheme,
        ]);

        foreach ($tables as $table) {
            $this->assertEquals($this->getTableInfo($table), $object->getTableInfoStr($table));
        }

        foreach (array_reverse($tables) as $table) {
            $object->deleteTable($table);
        }
    }

    public function testCreateTableSuccess()
    {
        $tables = [
            'testTable1',
            'testTable2',
            'testTable3',
        ];

        $object = $this->createObject([
            TableManagerMysql::KEY_AUTOCREATE_TABLES => $this->tableScheme,
        ]);

        foreach ($tables as $table) {
            //$object->createTable($table, $this->tableScheme[$table]);
            $this->assertEquals($this->getTableInfo($table), $object->getTableInfoStr($table));
        }

        foreach (array_reverse($tables) as $table) {
            $object->deleteTable($table);
        }
    }

    public function testRewriteSuccess()
    {
        $table = 'testTable1';
        $object = $this->createObject();

        $object->createTable($table, $this->tableScheme[$table]);
        $this->assertEquals($this->getTableInfo($table), $object->getTableInfoStr($table));

        $object->rewriteTable($table, $this->tableScheme[$table]);
        $this->assertEquals($this->getTableInfo($table), $object->getTableInfoStr($table));

        $object->deleteTable($table);
    }
}
