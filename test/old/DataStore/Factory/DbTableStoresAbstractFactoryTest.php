<?php
/**
 * @copyright Copyright Â© 2014 Rollun LC (http://rollun.com/)
 * @license LICENSE.md New BSD License
 */

namespace rollun\test\old\DataStore\Factory;

use Psr\Container\ContainerInterface;
use PHPUnit\Framework\TestCase;
use rollun\datastore\DataStore;
use Laminas\Db\Adapter\Adapter;
use Laminas\ServiceManager\Factory\AbstractFactoryInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-29 at 18:23:51.
 */
class DbTableAbstractFactoryTest extends TestCase
{
    /**
     * @var AbstractFactoryInterface
     */
    protected $object;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * @var ContainerInterface
     */
    protected $container;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->container = include './config/container.php';
        $this->object = new DataStore\Factory\DbTableAbstractFactory();
        $this->adapter = $this->container->get('db');
    }

    public function testDbTableAbstractFactory__canCreateIfConfigAbsent()
    {
        $requestedName = 'the_name_which_has_not_config';
        $result = $this->object->canCreate($this->container, $requestedName);
        $this->assertSame(false, $result);
    }

    public function testDbTableAbstractFactory__canCreateIfConfigExist()
    {
        $createStatementStr = 'CREATE TEMPORARY TABLE IF NOT EXISTS test_res_tablle (id INT)';
        $createStatement = $this->adapter->query($createStatementStr);
        $createStatement->execute();

        $container = include 'config/container.php';
        $requestedName = 'testDbTable';
        $result = $this->object->canCreate($container, $requestedName);
        $this->assertSame(true, $result);
    }

    public function testDbTableAbstractFactory__invokeIfConfigExist()
    {
        $createStatementStr = 'CREATE TEMPORARY TABLE IF NOT EXISTS test_res_tablle (id INT)';
        $createStatement = $this->adapter->query($createStatementStr);
        $createStatement->execute();

        $container = include 'config/container.php';
        $requestedName = 'testDbTable';
        $result = $this->object->__invoke($container, $requestedName);
        $this->assertSame('rollun\datastore\DataStore\DbTable', get_class($result));
    }
}
